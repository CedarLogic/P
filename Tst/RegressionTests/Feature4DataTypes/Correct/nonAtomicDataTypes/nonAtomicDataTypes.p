event E  assert 1;
event E1  assert 1;
event E2  assert 1;

main machine M
{
var M_tmp4: (seq[int], map[int, seq[int]]);
var M_t1: (seq[int], map[int, seq[int]]);
var M_t: (seq[int], map[int, seq[int]]);
var M_ts: (int, int);
var M_tt: (int, int);
var M_te: (int, event);
var M_i: int;
var M_tmp1: int;
var M_tmp: int;
var M_y: int;
var M_tmp2: (seq[any], map[int, seq[any]]);
var M_tmp3: map[int, seq[int]];
var M_s7: seq[int];
var M_s2: seq[int];
var M_s: seq[int];
var M_s1: seq[any];
var M_s3: seq[seq[any]];
var M_s8: seq[(int, int)];
var M_s4: seq[(int, int)];
var M_s5: seq[bool];
var M_s6: seq[map[int, any]];
var M_s9: seq[event];
var M_mac: machine;
var M_m4: map[int, int];
var M_m1: map[int, int];
var M_m3: map[int, bool];
var M_m6: map[int, any];
var M_m5: map[int, any];
var M_m2: map[int, map[int, any]];
var M_m7: map[bool, seq[(int, int)]];
var M_b: bool;
var M_e: event;
var M_a: any;

fun M_foo(): int
{


return (1);


}
fun M_bar(): event
{


return (E);


}
fun M_baz(): seq[bool]
{


return (M_s5);


}
fun M_daz(): map[int, int]
{


return (M_m1);


}
fun M_GetT1(): (seq[int], map[int, seq[int]])
{


return (M_t1);


}
fun M_IncY(): int
{


M_y = (M_y + 1);
;
return (M_y);


}
fun M_S_entry36(M_S_entry36__payload_0: any)
{
var _tmp508: bool;
var _tmp509: bool;
var _tmp510: bool;
var _tmp511: bool;
var _tmp512: bool;
var _tmp513: bool;
var _tmp514: bool;
var _tmp515: bool;
var _tmp516: any;
var _tmp517: bool;
var _tmp518: map[int, any];
var _tmp519: any;
var _tmp520: bool;
var _tmp521: any;
var _tmp522: bool;
var _tmp523: bool;
var _tmp524: bool;
var _tmp525: (int, int);
var _tmp526: bool;
var _tmp527: int;
var _tmp528: bool;
var _tmp529: bool;
var _tmp530: int;
var _tmp531: bool;
var _tmp532: (int, int);
var _tmp533: bool;
var _tmp534: int;
var _tmp535: bool;
var _tmp536: (int, event);
var _tmp537: bool;
var _tmp538: bool;
var _tmp539: event;
var _tmp540: (int, event);
var _tmp541: bool;
var _tmp542: bool;
var _tmp543: (int, null);
var _tmp544: bool;
var _tmp545: bool;
var _tmp546: int;
var _tmp547: bool;
var _tmp548: int;
var _tmp549: bool;
var _tmp550: bool;
var _tmp551: seq[int];
var _tmp552: int;
var _tmp553: bool;
var _tmp554: int;
var _tmp555: bool;
var _tmp556: int;
var _tmp557: bool;
var _tmp558: int;
var _tmp559: int;
var _tmp560: int;
var _tmp561: bool;
var _tmp562: int;
var _tmp563: int;
var _tmp564: bool;
var _tmp565: bool;
var _tmp566: bool;
var _tmp567: any;
var _tmp568: bool;
var _tmp569: bool;
var _tmp570: seq[any];
var _tmp571: bool;
var _tmp572: seq[bool];
var _tmp573: bool;
var _tmp574: seq[bool];
var _tmp575: seq[any];
var _tmp576: bool;
var _tmp577: seq[any];
var _tmp578: bool;
var _tmp579: any;
var _tmp580: seq[any];
var _tmp581: bool;
var _tmp582: any;
var _tmp583: seq[any];
var _tmp584: bool;
var _tmp585: bool;
var _tmp586: int;
var _tmp587: bool;
var _tmp588: map[int, int];
var _tmp589: map[int, bool];
var _tmp590: seq[map[int, any]];
var _tmp591: map[int, int];
var _tmp592: map[int, any];
var _tmp593: bool;
var _tmp594: any;
var _tmp595: map[int, any];
var _tmp596: bool;
var _tmp597: bool;
var _tmp598: int;
var _tmp599: seq[int];
var _tmp600: bool;
var _tmp601: any;
var _tmp602: map[int, any];
var _tmp603: bool;
var _tmp604: any;
var _tmp605: map[int, any];
var _tmp606: bool;
var _tmp607: map[int, any];
var _tmp608: bool;
var _tmp609: any;
var _tmp610: map[int, any];
var _tmp611: bool;
var _tmp612: int;
var _tmp613: bool;
var _tmp614: machine;
var _tmp615: bool;
var _tmp616: int;
var _tmp617: seq[int];
var _tmp618: bool;
var _tmp619: int;
var _tmp620: bool;
var _tmp621: int;
var _tmp622: bool;
var _tmp623: bool;
var _tmp624: int;
var _tmp625: bool;
var _tmp626: bool;
var _tmp627: bool;
var _tmp628: int;
var _tmp629: bool;
var _tmp630: seq[int];
var _tmp631: map[int, seq[int]];
var _tmp632: (seq[int], map[int, seq[int]]);
var _tmp633: seq[int];
var _tmp634: seq[int];
var _tmp635: map[int, seq[int]];
var _tmp636: map[int, seq[int]];
var _tmp637: (seq[int], map[int, seq[int]]);
var _tmp638: int;
var _tmp639: bool;
var _tmp640: int;
var _tmp641: bool;
var _tmp642: bool;
var _tmp643: int;
var _tmp644: bool;
var _tmp645: int;
var _tmp646: bool;
var _tmp647: bool;
var _tmp648: int;
var _tmp649: bool;
var _tmp650: int;
var _tmp651: bool;
var _tmp652: int;
var _tmp653: bool;
var _tmp654: bool;
var _tmp655: bool;
var _tmp656: seq[int];
var _tmp657: bool;
var _tmp658: int;
var _tmp659: seq[int];
var _tmp660: bool;
var _tmp661: seq[int];
var _tmp662: int;
var _tmp663: seq[int];
var _tmp664: bool;
var _tmp665: int;
var _tmp666: seq[int];
var _tmp667: bool;
var _tmp668: int;
var _tmp669: int;
var _tmp670: seq[int];
var _tmp671: bool;
var _tmp672: int;
var _tmp673: seq[int];
var _tmp674: int;
var _tmp675: bool;
var _tmp676: any;
var _tmp677: map[int, any];
var _tmp678: any;
var _tmp679: map[int, any];
var _tmp680: bool;
var _tmp681: any;
var _tmp682: map[int, any];
var _tmp683: any;
var _tmp684: map[int, any];
var _tmp685: bool;
var _tmp686: bool;
var _tmp687: any;
var _tmp688: map[int, any];
var _tmp689: any;
var _tmp690: map[int, any];
var _tmp691: bool;
var _tmp692: any;
var _tmp693: map[int, any];
var _tmp694: any;
var _tmp695: map[int, any];
var _tmp696: bool;
var _tmp697: bool;
var _tmp698: int;
var _tmp699: bool;
var _tmp700: int;
var _tmp701: (int, int);
var _tmp702: (int, int);
var _tmp703: int;
var _tmp704: (int, int);
var _tmp705: (int, int);
var _tmp706: (int, int);
var _tmp707: (int, int);
var _tmp708: (int, int);
var _tmp709: seq[(int, int)];
var _tmp710: (int, int);
var _tmp711: bool;
var _tmp712: (int, int);
var _tmp713: seq[(int, int)];
var _tmp714: (int, int);
var _tmp715: bool;
var _tmp716: int;
var _tmp717: int;
var _tmp718: int;
var _tmp719: bool;
var _tmp720: bool;
var _tmp722: int;
var _tmp723: (seq[int], map[int, seq[int]]);
var _tmp724: bool;
var _tmp725: bool;
var _tmp726: bool;
var _tmp728: int;
var _tmp729: int;
var _tmp730: bool;
var _tmp731: int;
var _tmp732: int;
var _tmp733: bool;
var _tmp734: (int, int);
var _tmp735: bool;
var _tmp736: bool;


M_y = 2;
;
_tmp508 = (M_y == 2);
;
assert _tmp508;
;
M_y = default(int);
;
_tmp509 = (M_y == 0);
;
assert _tmp509;
;
M_b = true;
;
_tmp510 = (M_b == true);
;
assert _tmp510;
;
M_b = default(bool);
;
_tmp511 = (M_b == false);
;
assert _tmp511;
;
M_e = E;
;
_tmp512 = (M_e == E);
;
assert _tmp512;
;
M_e = default(event);
;
_tmp513 = (M_e == null);
;
assert _tmp513;
;
M_mac = this;
;
M_mac = default(machine);
;
_tmp514 = (M_mac == null);
;
assert _tmp514;
;
M_a = true;
;
M_a = default(any);
;
_tmp515 = (M_a == null);
;
assert _tmp515;
;
M_m5 += (1, true);
;
_tmp516 = M_m5[1];
;
_tmp517 = (_tmp516 == true);
;
assert _tmp517;
;
_tmp518 = default(map[int, any]);
;
M_m5 = _tmp518;
;
_tmp519 = M_m5[1];
;
_tmp520 = (_tmp519 == null);
;
assert _tmp520;
;
M_m5 += (1, E);
;
_tmp521 = M_m5[1];
;
_tmp522 = (_tmp521 == E);
;
assert _tmp522;
;
M_ts.0 = (M_ts.1 + 1);
;
_tmp523 = (M_ts.0 == 1);
;
_tmp524 = (M_ts.1 == 0);
;
assert (_tmp523 && _tmp524);
;
_tmp525 = (1, 2);
;
M_ts = _tmp525;
;
M_ts.0 = (M_ts.1 + 1);
;
_tmp526 = (M_ts.0 == 3);
;
assert _tmp526;
;
M_ts.0 = 2;
;
M_ts.1 = 3;
;
_tmp527 = M_foo();
;
M_ts.0 = (M_ts.1 + _tmp527);
;
_tmp528 = (M_ts.0 == 4);
;
assert _tmp528;
;
M_ts.0 = (M_ts.0 + M_ts.1);
;
_tmp529 = (M_ts.0 == 7);
;
assert _tmp529;
;
M_tt.0 = 1;
;
M_tt.1 = 2;
;
_tmp530 = M_foo();
;
M_tt.0 = ((M_tt.1 + 1) + _tmp530);
;
_tmp531 = (M_tt.0 == 4);
;
assert _tmp531;
;
_tmp532 = (3, 4);
;
M_tt = _tmp532;
;
M_tt.0 = M_ts.1;
;
_tmp533 = (M_tt.0 == 3);
;
assert _tmp533;
;
_tmp534 = M_foo();
;
M_ts.1 = (M_tt.0 + _tmp534);
;
_tmp535 = (M_ts.1 == 4);
;
assert _tmp535;
;
_tmp536 = (2, E);
;
M_te = _tmp536;
;
_tmp537 = (M_te.0 == 2);
;
_tmp538 = (M_te.1 == E);
;
assert (_tmp537 && _tmp538);
;
_tmp539 = M_bar();
;
_tmp540 = (2, _tmp539);
;
M_te = _tmp540;
;
_tmp541 = (M_te.0 == 2);
;
_tmp542 = (M_te.1 == E);
;
assert (_tmp541 && _tmp542);
;
_tmp543 = (4, null);
;
M_te = _tmp543;
;
M_s += (0, 1);
;
M_s += (1, 2);
;
M_s -= 0;
;
_tmp544 = (sizeof(M_s) == 1);
;
assert _tmp544;
;
M_s -= 0;
;
_tmp545 = (sizeof(M_s) == 0);
;
assert _tmp545;
;
M_s += (0, 5);
;
M_s += (0, 6);
;
_tmp546 = M_s[0];
;
_tmp547 = (_tmp546 == 6);
;
assert _tmp547;
;
_tmp548 = M_s[1];
;
_tmp549 = (_tmp548 == 5);
;
assert _tmp549;
;
M_s -= 1;
;
_tmp550 = (sizeof(M_s) == 1);
;
assert _tmp550;
;
_tmp551 = default(seq[int]);
;
M_s = _tmp551;
;
M_s += (0, 1);
;
_tmp552 = M_s[0];
;
_tmp553 = (_tmp552 == 1);
;
assert _tmp553;
;
M_s[0] = 2;
;
_tmp554 = M_s[0];
;
_tmp555 = (_tmp554 == 2);
;
assert _tmp555;
;
M_i = 0;
;
_tmp556 = M_s[M_i];
;
_tmp557 = (_tmp556 == 2);
;
assert _tmp557;
;
_tmp558 = M_foo();
;
_tmp559 = M_foo();
;
M_s += (0, (_tmp558 + (2 * _tmp559)));
;
_tmp560 = M_s[0];
;
_tmp561 = (_tmp560 == 3);
;
assert _tmp561;
;
M_s += (1, 1);
;
_tmp562 = M_foo();
;
M_s -= (_tmp562 - 1);
;
_tmp563 = M_s[0];
;
_tmp564 = (_tmp563 == 1);
;
assert _tmp564;
;
M_s1 += (0, true);
;
M_s1 += (1, false);
;
_tmp565 = (sizeof(M_s1) == 2);
;
assert _tmp565;
;
M_s1 += (0, 1);
;
M_s5 += (0, true);
;
M_s5 += (1, false);
;
_tmp566 = (sizeof(M_s5) == 2);
;
assert _tmp566;
;
M_s1 = M_s;
;
_tmp567 = M_s1[0];
;
_tmp568 = (_tmp567 == 2);
;
assert _tmp568;
;
M_s9 += (0, E);
;
M_s9 += (1, E1);
;
M_s9 += (2, E2);
;
M_s9 += (3, null);
;
_tmp569 = (sizeof(M_s9) == 4);
;
assert _tmp569;
;
_tmp570 = default(seq[any]);
;
M_s1 = _tmp570;
;
M_s1 += (0, true);
;
M_s1 += (1, false);
;
_tmp571 = (sizeof(M_s1) == 2);
;
assert _tmp571;
;
M_s1 += (0, 1);
;
_tmp572 = default(seq[bool]);
;
M_s5 = _tmp572;
;
M_s5 += (0, true);
;
M_s5 += (1, false);
;
_tmp573 = (sizeof(M_s5) == 2);
;
assert _tmp573;
;
_tmp574 = M_baz();
;
M_s3 += (0, _tmp574);
;
M_s3 += (1, M_s1);
;
_tmp575 = M_s3[0];
;
_tmp576 = (_tmp575 == M_s5);
;
assert _tmp576;
;
_tmp577 = M_s3[1];
;
_tmp578 = (_tmp577 == M_s1);
;
assert _tmp578;
;
_tmp580 = M_s3[1];
;
_tmp579 = _tmp580[0];
;
_tmp581 = (_tmp579 == 1);
;
assert _tmp581;
;
M_s3[1] = M_s5;
;
_tmp583 = M_s3[1];
;
_tmp582 = _tmp583[0];
;
_tmp584 = (_tmp582 == true);
;
assert _tmp584;
;
_tmp585 = (sizeof(M_s3) == 2);
;
assert _tmp585;
;
_tmp586 = M_foo();
;
M_s3 -= _tmp586;
;
M_s3 -= 0;
;
_tmp587 = (sizeof(M_s3) == 0);
;
assert _tmp587;
;
_tmp588 = default(map[int, int]);
;
M_m1 = _tmp588;
;
M_m1[0] = 2;
;
M_m1[1] = 3;
;
_tmp589 = default(map[int, bool]);
;
M_m3 = _tmp589;
;
M_m3[0] = true;
;
M_m3[1] = true;
;
_tmp590 = default(seq[map[int, any]]);
;
M_s6 = _tmp590;
;
_tmp591 = M_daz();
;
M_s6 += (0, _tmp591);
;
_tmp592 = M_s6[0];
;
_tmp593 = (_tmp592 == M_m1);
;
assert _tmp593;
;
_tmp595 = M_s6[0];
;
_tmp594 = _tmp595[0];
;
_tmp596 = (_tmp594 == 2);
;
assert _tmp596;
;
M_s6 += (1, M_m3);
;
_tmp597 = (sizeof(M_s6) == 2);
;
assert _tmp597;
;
_tmp599 = keys(M_s6[0]);
;
_tmp598 = _tmp599[1];
;
_tmp600 = (_tmp598 == 1);
;
assert _tmp600;
;
_tmp602 = M_s6[1];
;
_tmp601 = _tmp602[2];
;
_tmp603 = (_tmp601 == false);
;
assert _tmp603;
;
M_s6[1][2] = true;
;
_tmp605 = M_s6[1];
;
_tmp604 = _tmp605[2];
;
_tmp606 = (_tmp604 == true);
;
assert _tmp606;
;
M_s6[1][3] = true;
;
_tmp607 = M_s6[1];
;
_tmp608 = (sizeof(_tmp607) == 3);
;
assert _tmp608;
;
M_s6[1] = M_m1;
;
_tmp610 = M_s6[1];
;
_tmp609 = _tmp610[0];
;
_tmp611 = (_tmp609 == 2);
;
assert _tmp611;
;
_tmp612 = M_foo();
;
M_s6 -= _tmp612;
;
_tmp613 = (sizeof(M_s6) == 2);
;
assert _tmp613;
;
M_s2 += (0, 1);
;
M_s2 += (0, 3);
;
_tmp614 = new Test(M_s2);
;
M_mac = _tmp614;
;
M_m1[0] = 1;
;
_tmp615 = (0 in M_m1);
;
assert _tmp615;
;
_tmp617 = keys(M_m1);
;
_tmp616 = _tmp617[0];
;
M_i = _tmp616;
;
_tmp618 = (M_i == 0);
;
assert _tmp618;
;
_tmp619 = M_m1[0];
;
_tmp620 = (_tmp619 == 1);
;
assert _tmp620;
;
M_m1[0] = 2;
;
_tmp621 = M_m1[0];
;
_tmp622 = (_tmp621 == 2);
;
assert _tmp622;
;
M_m1 -= 0;
;
_tmp623 = (sizeof(M_m1) == 0);
;
assert _tmp623;
;
M_m1[0] = 2;
;
M_i = 0;
;
_tmp624 = M_m1[M_i];
;
_tmp625 = (_tmp624 == 2);
;
assert _tmp625;
;
M_m1[1] = 3;
;
M_m3[0] = true;
;
M_m3[2] = false;
;
_tmp626 = (sizeof(M_m3) == 2);
;
assert _tmp626;
;
_tmp627 = (2 in M_m3);
;
assert _tmp627;
;
M_m4 = M_m1;
;
_tmp628 = M_m4[M_i];
;
_tmp629 = (_tmp628 == 2);
;
assert _tmp629;
;
_tmp630 = default(seq[int]);
;
M_s7 = _tmp630;
;
M_s7 += (0, 1);
;
_tmp631 = default(map[int, seq[int]]);
;
M_tmp3 = _tmp631;
;
M_tmp3[0] = M_s7;
;
_tmp634 = default(seq[int]);
;
_tmp633 = _tmp634;
;
_tmp636 = default(map[int, seq[int]]);
;
_tmp635 = _tmp636;
;
_tmp632 = (_tmp633, _tmp635);
;
M_t = _tmp632;
;
_tmp637 = (M_s7, M_tmp3);
;
M_t = _tmp637;
;
_tmp638 = M_foo();
;
_tmp639 = (sizeof(M_t.0) == _tmp638);
;
assert _tmp639;
;
M_t.0 += (0, 2);
;
_tmp640 = M_t.0[0];
;
_tmp641 = (_tmp640 == 2);
;
assert _tmp641;
;
_tmp642 = (sizeof(M_t.0) == 2);
;
assert _tmp642;
;
M_t.0 += (1, 3);
;
_tmp643 = M_t.0[1];
;
_tmp644 = (_tmp643 == 3);
;
assert _tmp644;
;
_tmp645 = M_t.0[2];
;
_tmp646 = (_tmp645 == 1);
;
assert _tmp646;
;
_tmp647 = (sizeof(M_t.0) == 3);
;
assert _tmp647;
;
M_t.0 += (0, 5);
;
_tmp648 = M_t.0[0];
;
_tmp649 = (_tmp648 == 5);
;
assert _tmp649;
;
_tmp650 = M_t.0[1];
;
_tmp651 = (_tmp650 == 2);
;
assert _tmp651;
;
_tmp652 = M_t.0[3];
;
_tmp653 = (_tmp652 == 1);
;
assert _tmp653;
;
_tmp654 = (sizeof(M_t.0) == 4);
;
assert _tmp654;
;
_tmp655 = (M_t.1 == M_tmp3);
;
assert _tmp655;
;
_tmp656 = M_t.1[0];
;
_tmp657 = (_tmp656 == M_s7);
;
assert _tmp657;
;
_tmp659 = M_t.1[0];
;
_tmp658 = _tmp659[0];
;
_tmp660 = (_tmp658 == 1);
;
assert _tmp660;
;
_tmp661 = default(seq[int]);
;
M_s2 = _tmp661;
;
M_s2 += (0, 1);
;
M_s2 += (0, 3);
;
M_tmp3[0] = M_s2;
;
M_t.1 = M_tmp3;
;
_tmp663 = M_t.1[0];
;
_tmp662 = _tmp663[0];
;
_tmp664 = (_tmp662 == 3);
;
assert _tmp664;
;
_tmp666 = M_t.1[0];
;
_tmp665 = _tmp666[1];
;
_tmp667 = (_tmp665 == 1);
;
assert _tmp667;
;
M_m5[0] = 1;
;
M_m5[1] = false;
;
_tmp668 = M_foo();
;
M_m5 += (2, (_tmp668 + 1));
;
M_m5[3] = true;
;
_tmp670 = keys(M_m5);
;
_tmp669 = _tmp670[0];
;
M_i = _tmp669;
;
_tmp671 = (M_i == 0);
;
assert _tmp671;
;
_tmp673 = keys(M_m5);
;
_tmp674 = M_foo();
;
_tmp672 = _tmp673[(_tmp674 + 2)];
;
M_i = _tmp672;
;
_tmp675 = (M_i == 3);
;
assert _tmp675;
;
M_m6 = M_m5;
;
M_m6[3] = 5;
;
M_m2[0] = M_m5;
;
M_m2[1] = M_m6;
;
_tmp677 = M_m2[0];
;
_tmp676 = _tmp677[0];
;
_tmp679 = M_m2[1];
;
_tmp678 = _tmp679[0];
;
_tmp680 = (_tmp676 == _tmp678);
;
assert _tmp680;
;
_tmp682 = M_m2[0];
;
_tmp681 = _tmp682[3];
;
_tmp684 = M_m2[1];
;
_tmp683 = _tmp684[3];
;
_tmp685 = (_tmp681 == _tmp683);
;
assert !(_tmp685);
;
M_i = 0;
;
while((M_i < 4))
{

_tmp686 = (M_i == 3);
;
if(!(_tmp686))
{

_tmp688 = M_m2[0];
;
_tmp687 = _tmp688[M_i];
;
_tmp690 = M_m2[1];
;
_tmp689 = _tmp690[M_i];
;
_tmp691 = (_tmp687 == _tmp689);
;
assert _tmp691;
;
assert (M_m2[0][M_i] == M_m2[1][M_i]);



}
else
{

_tmp693 = M_m2[0];
;
_tmp692 = _tmp693[M_i];
;
_tmp695 = M_m2[1];
;
_tmp694 = _tmp695[M_i];
;
_tmp696 = (_tmp692 == _tmp694);
;
assert !(_tmp696);
;
assert (M_m2[0][M_i] != M_m2[1][M_i]);



}
;
M_i = (M_i + 1);
;
if((M_i != 3))
{
assert (M_m2[0][M_i] == M_m2[1][M_i]);

}
else
{
assert (M_m2[0][M_i] != M_m2[1][M_i]);

}
;
M_i = (M_i + 1);



}
;
_tmp697 = (sizeof(M_m2) == 2);
;
assert _tmp697;
;
_tmp698 = M_foo();
;
M_m2 -= _tmp698;
;
_tmp699 = (sizeof(M_m2) == 1);
;
assert _tmp699;
;
_tmp700 = M_foo();
;
_tmp701 = (0, (_tmp700 - 1));
;
M_s4 += (0, _tmp701);
;
_tmp702 = (1, 1);
;
M_s4 += (1, _tmp702);
;
_tmp703 = M_foo();
;
_tmp704 = (2, (_tmp703 + 1));
;
M_s4 += (2, _tmp704);
;
_tmp705 = (1, 1);
;
M_s8 += (0, _tmp705);
;
_tmp706 = (2, 2);
;
M_s8 += (1, _tmp706);
;
_tmp707 = (3, 3);
;
M_s8 += (2, _tmp707);
;
M_m7[true] = M_s4;
;
M_m7[false] = M_s8;
;
_tmp709 = M_m7[true];
;
_tmp708 = _tmp709[0];
;
_tmp710 = (0, 0);
;
_tmp711 = (_tmp708 == _tmp710);
;
assert _tmp711;
;
_tmp713 = M_m7[false];
;
_tmp712 = _tmp713[2];
;
_tmp714 = (3, 3);
;
_tmp715 = (_tmp712 == _tmp714);
;
assert _tmp715;
;
M_t1.0 += (0, 2);
;
_tmp717 = M_foo();
;
_tmp716 = M_t1.0[(_tmp717 - 1)];
;
_tmp718 = M_foo();
;
_tmp719 = (_tmp716 == (_tmp718 + 1));
;
assert _tmp719;
;
M_tmp = M_foo();
;
M_tmp4 = M_GetT1();
;
M_tmp4.0 += (1, 1);
;
M_tmp2 = M_GetT1();
;
_tmp720 = (M_tmp2 == M_t1);
;
assert _tmp720;
;
_tmp721 = M_foo();
;
_tmp722 = M_foo();
;
M_tmp2.0[(_tmp721 - 1)] = _tmp722;
;
_tmp723 = M_GetT1();
;
_tmp724 = (M_tmp2 == _tmp723);
;
assert !(_tmp724);
;
M_tmp1 = M_IncY();
;
_tmp725 = (M_tmp1 == 1);
;
assert _tmp725;
;
M_y = M_IncY();
;
_tmp726 = (M_y == 2);
;
assert _tmp726;
;
M_tmp1 = 1;
;
_tmp727 = M_foo();
;
M_t.0[_tmp727] = M_tmp1;
;
_tmp729 = M_foo();
;
_tmp728 = M_t.0[_tmp729];
;
_tmp730 = (_tmp728 == M_tmp1);
;
assert _tmp730;
;
M_t.0[M_tmp] = M_tmp1;
;
_tmp732 = M_foo();
;
_tmp731 = M_t.0[_tmp732];
;
_tmp733 = (_tmp731 == M_tmp1);
;
assert _tmp733;
;
M_tmp = M_foo();
;
M_tmp1 = M_IncY();
;
_tmp734 = (M_tmp1, (M_tmp + 5));
;
M_ts = _tmp734;
;
_tmp735 = (M_ts.0 == 3);
;
assert _tmp735;
;
_tmp736 = (M_ts.1 == 6);
;
assert _tmp736;
;
raise halt;


}
fun M_S_exit0_rand_656061057()
{


;


}start  state M_S
{entry (payload: any) {
M_S_entry36(payload);
}
exit  {
M_S_exit0_rand_656061057();
}
}
}

machine Test
{
var Test_ss: seq[int];

fun Test_init_entry397(Test_init_entry397_payload: seq[int])
{
var _tmp737: int;
var _tmp738: bool;


Test_ss = Test_init_entry397_payload;
;
_tmp737 = Test_ss[0];
;
_tmp738 = (_tmp737 == 3);
;
assert _tmp738;


}
fun Test_init_exit0_rand_1581810855()
{


;


}start  state Test_init
{entry (payload: seq[int]) {
Test_init_entry397(payload);
}
exit  {
Test_init_exit0_rand_1581810855();
}
}
}

