=================================
         Console output          
=================================
OUT: receive1.p (0, 0): inferred type:  NIL
OUT: receive1.p (11, 7): inferred type:  BaseType(REAL)
OUT: receive1.p (11, 7): inferred type:  NIL
OUT: receive1.p (11, 11): inferred type:  BaseType(REAL)
OUT: receive1.p (11, 17): inferred type:  BaseType(REAL)
OUT: receive1.p (12, 4): inferred type:  BaseType(INT)
OUT: receive1.p (12, 4): inferred type:  NIL
OUT: receive1.p (12, 10): inferred type:  BaseType(INT)
OUT: receive1.p (13, 4): inferred type:  NIL
OUT: receive1.p (13, 13): inferred type:  BaseType(BOOL)
OUT: receive1.p (13, 16): inferred type:  BaseType(INT)
OUT: receive1.p (14, 4): inferred type:  NIL
OUT: receive1.p (14, 8): inferred type:  TupType(BaseType(REAL), TupType(BaseType(INT), NIL))
OUT: receive1.p (14, 11): inferred type:  BaseType(INT)
OUT: receive1.p (14, 11): inferred type:  TupType(BaseType(INT), NIL)
OUT: receive1.p (15, 4): inferred type:  NIL
OUT: receive1.p (15, 13): inferred type:  BaseType(BOOL)
OUT: receive1.p (15, 16): inferred type:  BaseType(INT)
OUT: receive1.p (19, 3): inferred type:  NIL
OUT: receive1.p (19, 8): inferred type:  BaseType(REAL)
OUT: receive1.p (19, 11): inferred type:  BaseType(EVENT)
OUT: receive1.p (19, 14): inferred type:  BaseType(INT)
OUT: receive1.p (20, 3): inferred type:  NIL
OUT: receive1.p (20, 11): inferred type:  BaseType(EVENT)
OUT: receive1.p (20, 14): inferred type:  BaseType(INT)
OUT: receive1.p (22, 14): inferred type:  BaseType(INT)
OUT: receive1.p (22, 14): inferred type:  NIL
OUT: receive1.p (22, 20): inferred type:  BaseType(INT)
OUT: receive1.p (22, 22): inferred type:  BaseType(INT)
OUT: receive1.p (22, 24): inferred type:  BaseType(INT)
OUT: receive1.p (22, 26): inferred type:  BaseType(INT)
OUT: receive1.p (23, 14): inferred type:  BaseType(INT)
OUT: receive1.p (23, 14): inferred type:  NIL
OUT: receive1.p (23, 20): inferred type:  BaseType(INT)
OUT: receive1.p (23, 22): inferred type:  BaseType(INT)
OUT: receive1.p (23, 24): inferred type:  BaseType(INT)
OUT: receive1.p (23, 26): inferred type:  BaseType(INT)
OUT: receive1.p (24, 29): inferred type:  BaseType(INT)
OUT: receive1.p (24, 29): inferred type:  NIL
OUT: receive1.p (24, 35): inferred type:  BaseType(INT)
OUT: receive1.p (24, 37): inferred type:  BaseType(INT)
OUT: receive1.p (24, 39): inferred type:  BaseType(INT)
OUT: receive1.p (24, 41): inferred type:  BaseType(INT)
OUT: receive1.p (34, 4): inferred type:  BaseType(INT)
OUT: receive1.p (34, 4): inferred type:  NIL
OUT: receive1.p (34, 10): inferred type:  BaseType(INT)
OUT: receive1.p (34, 12): inferred type:  BaseType(INT)
OUT: receive1.p (35, 4): inferred type:  BaseType(REAL)
OUT: receive1.p (35, 4): inferred type:  NIL
OUT: receive1.p (35, 8): inferred type:  BaseType(REAL)
OUT: receive1.p (36, 4): inferred type:  NIL
OUT: receive1.p (38, 6): inferred type:  NIL
OUT: receive1.p (38, 13): inferred type:  BaseType(INT)
OUT: receive1.p (38, 22): inferred type:  BaseType(BOOL)
OUT: receive1.p (38, 25): inferred type:  BaseType(INT)
OUT: receive1.p (39, 6): inferred type:  NIL
OUT: receive1.p (44, 8): inferred type:  BaseType(INT)
OUT: receive1.p (44, 8): inferred type:  NIL
OUT: receive1.p (44, 12): inferred type:  BaseType(INT)
OUT: receive1.p (45, 8): inferred type:  NIL
OUT: receive1.p (45, 13): inferred type:  BaseType(REAL)
OUT: receive1.p (45, 16): inferred type:  BaseType(EVENT)
OUT: receive1.p (47, 8): inferred type:  BaseType(INT)
OUT: receive1.p (47, 8): inferred type:  NIL
OUT: receive1.p (47, 12): inferred type:  BaseType(INT)
OUT: receive1.p (48, 8): inferred type:  BaseType(INT)
OUT: receive1.p (48, 8): inferred type:  NIL
OUT: receive1.p (48, 12): inferred type:  BaseType(INT)
OUT: receive1.p (49, 8): inferred type:  NIL
OUT: receive1.p (49, 17): inferred type:  BaseType(BOOL)
OUT: receive1.p (49, 22): inferred type:  BaseType(INT)
OUT: receive1.p (49, 24): inferred type:  BaseType(INT)
OUT: receive1.p (55, 4): inferred type:  NIL
OUT: receive1.p (55, 13): inferred type:  BaseType(BOOL)
OUT: Writing stubs.c ...
OUT: Writing program.h ...
OUT: Writing program.c ...
OUT: Writing receive1.zing ...
OUT: Compiling receive1.zing to receive1.dll ...
EXIT: 0
