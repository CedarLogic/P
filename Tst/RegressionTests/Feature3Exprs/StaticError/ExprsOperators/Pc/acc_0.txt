=================================
         Console output          
=================================
OUT: exproperators.p (56, 5): inferred type:  NIL
OUT: exproperators.p (56, 11): inferred type:  BaseType(BOOL)
OUT: exproperators.p (56, 15): inferred type:  BaseType(BOOL)
OUT: exproperators.p (57, 5): inferred type:  NIL
OUT: exproperators.p (57, 11): inferred type:  BaseType(BOOL)
OUT: exproperators.p (57, 15): inferred type:  BaseType(BOOL)
OUT: exproperators.p (58, 5): inferred type:  NIL
OUT: exproperators.p (58, 20): inferred type:  BaseType(BOOL)
OUT: exproperators.p (59, 5): inferred type:  NIL
OUT: exproperators.p (59, 20): inferred type:  BaseType(BOOL)
OUT: exproperators.p (60, 5): inferred type:  NIL
OUT: exproperators.p (60, 20): inferred type:  BaseType(BOOL)
OUT: exproperators.p (60, 31): inferred type:  BaseType(BOOL)
OUT: exproperators.p (61, 5): inferred type:  NIL
OUT: exproperators.p (61, 20): inferred type:  BaseType(BOOL)
OUT: exproperators.p (62, 5): inferred type:  ERROR
OUT: exproperators.p (62, 5): inferred type:  NIL
OUT: exproperators.p (62, 20): inferred type:  ERROR
OUT: exproperators.p (62, 30): inferred type:  ERROR
OUT: exproperators.p (63, 5): inferred type:  ERROR
OUT: exproperators.p (63, 5): inferred type:  NIL
OUT: exproperators.p (63, 15): inferred type:  ERROR
OUT: exproperators.p (63, 16): inferred type:  BaseType(INT)
OUT: exproperators.p (64, 5): inferred type:  ERROR
OUT: exproperators.p (64, 5): inferred type:  NIL
OUT: exproperators.p (64, 20): inferred type:  ERROR
OUT: exproperators.p (65, 5): inferred type:  ERROR
OUT: exproperators.p (65, 5): inferred type:  NIL
OUT: exproperators.p (65, 14): inferred type:  ERROR
OUT: exproperators.p (66, 5): inferred type:  ERROR
OUT: exproperators.p (66, 5): inferred type:  NIL
OUT: exproperators.p (66, 20): inferred type:  ERROR
OUT: exproperators.p (66, 25): inferred type:  ERROR
OUT: exproperators.p (67, 5): inferred type:  ERROR
OUT: exproperators.p (67, 5): inferred type:  NIL
OUT: exproperators.p (67, 12): inferred type:  BaseType(INT)
OUT: exproperators.p (67, 14): inferred type:  ERROR
OUT: exproperators.p (68, 5): inferred type:  BaseType(EVENT)
OUT: exproperators.p (68, 5): inferred type:  NIL
OUT: exproperators.p (68, 10): inferred type:  BaseType(EVENT)
OUT: exproperators.p (69, 5): inferred type:  ERROR
OUT: exproperators.p (69, 5): inferred type:  NIL
OUT: exproperators.p (69, 15): inferred type:  ERROR
OUT: exproperators.p (71, 5): inferred type:  NIL
OUT: exproperators.p (71, 5): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (71, 8): inferred type:  BaseType(INT)
OUT: exproperators.p (71, 12): inferred type:  BaseType(INT)
OUT: exproperators.p (72, 5): inferred type:  NIL
OUT: exproperators.p (72, 8): inferred type:  BaseType(INT)
OUT: exproperators.p (72, 12): inferred type:  BaseType(INT)
OUT: exproperators.p (73, 5): inferred type:  NIL
OUT: exproperators.p (73, 17): inferred type:  BaseType(INT)
OUT: exproperators.p (73, 24): inferred type:  BaseType(BOOL)
OUT: exproperators.p (74, 5): inferred type:  NIL
OUT: exproperators.p (74, 17): inferred type:  BaseType(INT)
OUT: exproperators.p (74, 24): inferred type:  BaseType(BOOL)
OUT: exproperators.p (74, 27): inferred type:  BaseType(INT)
OUT: exproperators.p (75, 5): inferred type:  NIL
OUT: exproperators.p (75, 17): inferred type:  BaseType(INT)
OUT: exproperators.p (75, 24): inferred type:  BaseType(BOOL)
OUT: exproperators.p (75, 27): inferred type:  BaseType(INT)
OUT: exproperators.p (76, 5): inferred type:  NIL
OUT: exproperators.p (76, 17): inferred type:  BaseType(INT)
OUT: exproperators.p (76, 24): inferred type:  BaseType(BOOL)
OUT: exproperators.p (77, 5): inferred type:  NIL
OUT: exproperators.p (77, 17): inferred type:  BaseType(INT)
OUT: exproperators.p (77, 19): inferred type:  BaseType(INT)
OUT: exproperators.p (77, 21): inferred type:  BaseType(INT)
OUT: exproperators.p (77, 25): inferred type:  BaseType(BOOL)
OUT: exproperators.p (78, 5): inferred type:  NIL
OUT: exproperators.p (78, 17): inferred type:  BaseType(BOOL)
OUT: exproperators.p (80, 5): inferred type:  ERROR
OUT: exproperators.p (80, 5): inferred type:  NIL
OUT: exproperators.p (80, 17): inferred type:  ERROR
OUT: exproperators.p (81, 5): inferred type:  ERROR
OUT: exproperators.p (81, 5): inferred type:  NIL
OUT: exproperators.p (81, 20): inferred type:  ERROR
OUT: exproperators.p (82, 5): inferred type:  ERROR
OUT: exproperators.p (82, 5): inferred type:  NIL
OUT: exproperators.p (82, 17): inferred type:  ERROR
OUT: exproperators.p (83, 5): inferred type:  ERROR
OUT: exproperators.p (83, 5): inferred type:  NIL
OUT: exproperators.p (83, 17): inferred type:  ERROR
OUT: exproperators.p (85, 5): inferred type:  ERROR
OUT: exproperators.p (85, 5): inferred type:  NIL
OUT: exproperators.p (85, 18): inferred type:  ERROR
OUT: exproperators.p (86, 5): inferred type:  ERROR
OUT: exproperators.p (86, 5): inferred type:  NIL
OUT: exproperators.p (86, 18): inferred type:  ERROR
OUT: exproperators.p (87, 5): inferred type:  ERROR
OUT: exproperators.p (87, 5): inferred type:  NIL
OUT: exproperators.p (87, 18): inferred type:  ERROR
OUT: exproperators.p (88, 5): inferred type:  ERROR
OUT: exproperators.p (88, 5): inferred type:  NIL
OUT: exproperators.p (88, 18): inferred type:  ERROR
OUT: exproperators.p (90, 5): inferred type:  ERROR
OUT: exproperators.p (90, 5): inferred type:  NIL
OUT: exproperators.p (90, 17): inferred type:  ERROR
OUT: exproperators.p (91, 5): inferred type:  ERROR
OUT: exproperators.p (91, 5): inferred type:  NIL
OUT: exproperators.p (91, 17): inferred type:  ERROR
OUT: exproperators.p (92, 5): inferred type:  ERROR
OUT: exproperators.p (92, 5): inferred type:  NIL
OUT: exproperators.p (92, 20): inferred type:  ERROR
OUT: exproperators.p (94, 5): inferred type:  ERROR
OUT: exproperators.p (94, 5): inferred type:  NIL
OUT: exproperators.p (94, 17): inferred type:  ERROR
OUT: exproperators.p (95, 5): inferred type:  ERROR
OUT: exproperators.p (95, 5): inferred type:  NIL
OUT: exproperators.p (95, 12): inferred type:  ERROR
OUT: exproperators.p (96, 5): inferred type:  ERROR
OUT: exproperators.p (96, 5): inferred type:  NIL
OUT: exproperators.p (96, 17): inferred type:  ERROR
OUT: exproperators.p (98, 5): inferred type:  ERROR
OUT: exproperators.p (98, 5): inferred type:  NIL
OUT: exproperators.p (98, 15): inferred type:  ERROR
OUT: exproperators.p (99, 5): inferred type:  ERROR
OUT: exproperators.p (99, 5): inferred type:  NIL
OUT: exproperators.p (99, 15): inferred type:  ERROR
OUT: exproperators.p (101, 5): inferred type:  ERROR
OUT: exproperators.p (101, 5): inferred type:  NIL
OUT: exproperators.p (101, 12): inferred type:  ERROR
OUT: exproperators.p (104, 5): inferred type:  NIL
OUT: exproperators.p (104, 16): inferred type:  BaseType(BOOL)
OUT: exproperators.p (106, 5): inferred type:  ERROR
OUT: exproperators.p (106, 5): inferred type:  NIL
OUT: exproperators.p (106, 17): inferred type:  ERROR
OUT: exproperators.p (106, 20): inferred type:  ERROR
OUT: exproperators.p (107, 5): inferred type:  ERROR
OUT: exproperators.p (107, 5): inferred type:  NIL
OUT: exproperators.p (107, 14): inferred type:  ERROR
OUT: exproperators.p (107, 21): inferred type:  ERROR
OUT: exproperators.p (108, 5): inferred type:  ERROR
OUT: exproperators.p (108, 5): inferred type:  NIL
OUT: exproperators.p (108, 14): inferred type:  ERROR
OUT: exproperators.p (108, 18): inferred type:  ERROR
OUT: exproperators.p (110, 5): inferred type:  ERROR
OUT: exproperators.p (110, 5): inferred type:  NIL
OUT: exproperators.p (110, 14): inferred type:  ERROR
OUT: exproperators.p (111, 5): inferred type:  ERROR
OUT: exproperators.p (111, 5): inferred type:  NIL
OUT: exproperators.p (111, 14): inferred type:  ERROR
OUT: exproperators.p (113, 5): inferred type:  BaseType(ANY)
OUT: exproperators.p (113, 5): inferred type:  NIL
OUT: exproperators.p (115, 5): inferred type:  NIL
OUT: exproperators.p (124, 5): inferred type:  NIL
OUT: exproperators.p (124, 9): inferred type:  BaseType(BOOL)
OUT: exproperators.p (125, 5): inferred type:  ERROR
OUT: exproperators.p (125, 5): inferred type:  NIL
OUT: exproperators.p (125, 14): inferred type:  ERROR
OUT: exproperators.p (129, 5): inferred type:  NIL
OUT: exproperators.p (129, 5): inferred type:  SeqType(BaseType(BOOL))
OUT: exproperators.p (129, 13): inferred type:  TupType(BaseType(INT), TupType(BaseType(BOOL), NIL))
OUT: exproperators.p (129, 15): inferred type:  TupType(BaseType(BOOL), NIL)
OUT: exproperators.p (130, 5): inferred type:  NIL
OUT: exproperators.p (130, 13): inferred type:  TupType(BaseType(INT), TupType(BaseType(BOOL), NIL))
OUT: exproperators.p (130, 16): inferred type:  BaseType(BOOL)
OUT: exproperators.p (130, 16): inferred type:  TupType(BaseType(BOOL), NIL)
OUT: exproperators.p (130, 20): inferred type:  BaseType(BOOL)
OUT: exproperators.p (131, 5): inferred type:  NIL
OUT: exproperators.p (131, 15): inferred type:  BaseType(BOOL)
OUT: exproperators.p (131, 19): inferred type:  BaseType(BOOL)
OUT: exproperators.p (132, 5): inferred type:  ERROR
OUT: exproperators.p (132, 5): inferred type:  NIL
OUT: exproperators.p (132, 13): inferred type:  TupType(BaseType(INT), TupType(BaseType(EVENT), NIL))
OUT: exproperators.p (132, 16): inferred type:  TupType(BaseType(EVENT), NIL)
OUT: exproperators.p (134, 5): inferred type:  NIL
OUT: exproperators.p (134, 5): inferred type:  SeqType(BaseType(INT))
OUT: exproperators.p (134, 12): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (134, 14): inferred type:  TupType(BaseType(INT), NIL)
OUT: exproperators.p (135, 5): inferred type:  NIL
OUT: exproperators.p (135, 12): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (135, 15): inferred type:  BaseType(INT)
OUT: exproperators.p (135, 15): inferred type:  TupType(BaseType(INT), NIL)
OUT: exproperators.p (135, 19): inferred type:  BaseType(INT)
OUT: exproperators.p (136, 5): inferred type:  NIL
OUT: exproperators.p (136, 14): inferred type:  BaseType(INT)
OUT: exproperators.p (136, 18): inferred type:  BaseType(BOOL)
OUT: exproperators.p (138, 5): inferred type:  ERROR
OUT: exproperators.p (138, 5): inferred type:  NIL
OUT: exproperators.p (138, 5): inferred type:  SeqType(BaseType(BOOL))
OUT: exproperators.p (138, 12): inferred type:  TupType(BaseType(BOOL), TupType(BaseType(BOOL), NIL))
OUT: exproperators.p (138, 18): inferred type:  TupType(BaseType(BOOL), NIL)
OUT: exproperators.p (141, 5): inferred type:  NIL
OUT: exproperators.p (141, 7): inferred type:  BaseType(INT)
OUT: exproperators.p (142, 5): inferred type:  NIL
OUT: exproperators.p (142, 15): inferred type:  BaseType(BOOL)
OUT: exproperators.p (143, 5): inferred type:  BaseType(INT)
OUT: exproperators.p (143, 5): inferred type:  NIL
OUT: exproperators.p (143, 9): inferred type:  SeqType(BaseType(INT))
OUT: exproperators.p (143, 14): inferred type:  MapType(BaseType(INT), BaseType(INT))
OUT: exproperators.p (143, 17): inferred type:  BaseType(INT)
OUT: exproperators.p (144, 5): inferred type:  NIL
OUT: exproperators.p (144, 14): inferred type:  BaseType(BOOL)
OUT: exproperators.p (146, 5): inferred type:  ERROR
OUT: exproperators.p (146, 5): inferred type:  NIL
OUT: exproperators.p (146, 9): inferred type:  ERROR
OUT: exproperators.p (146, 14): inferred type:  TupType(BaseType(BOOL), TupType(BaseType(BOOL), NIL))
OUT: exproperators.p (146, 20): inferred type:  ERROR
OUT: exproperators.p (147, 5): inferred type:  ERROR
OUT: exproperators.p (147, 5): inferred type:  NIL
OUT: exproperators.p (147, 9): inferred type:  ERROR
OUT: exproperators.p (147, 22): inferred type:  ERROR
OUT: exproperators.p (148, 5): inferred type:  ERROR
OUT: exproperators.p (148, 5): inferred type:  NIL
OUT: exproperators.p (148, 9): inferred type:  ERROR
OUT: exproperators.p (150, 5): inferred type:  NIL
OUT: exproperators.p (150, 7): inferred type:  BaseType(INT)
OUT: exproperators.p (150, 13): inferred type:  BaseType(INT)
OUT: exproperators.p (151, 5): inferred type:  NIL
OUT: exproperators.p (151, 7): inferred type:  BaseType(INT)
OUT: exproperators.p (151, 13): inferred type:  BaseType(INT)
OUT: exproperators.p (152, 5): inferred type:  NIL
OUT: exproperators.p (152, 18): inferred type:  BaseType(INT)
OUT: exproperators.p (152, 26): inferred type:  BaseType(BOOL)
OUT: exproperators.p (154, 5): inferred type:  NIL
OUT: exproperators.p (154, 18): inferred type:  BaseType(BOOL)
OUT: exproperators.p (155, 5): inferred type:  NIL
OUT: exproperators.p (156, 5): inferred type:  NIL
OUT: exproperators.p (156, 18): inferred type:  BaseType(BOOL)
OUT: exproperators.p (157, 5): inferred type:  NIL
OUT: exproperators.p (157, 18): inferred type:  BaseType(BOOL)
OUT: exproperators.p (158, 5): inferred type:  NIL
OUT: exproperators.p (158, 7): inferred type:  BaseType(INT)
OUT: exproperators.p (158, 8): inferred type:  BaseType(INT)
OUT: exproperators.p (159, 5): inferred type:  NIL
OUT: exproperators.p (159, 18): inferred type:  BaseType(BOOL)
OUT: exproperators.p (160, 5): inferred type:  NIL
OUT: exproperators.p (160, 14): inferred type:  BaseType(INT)
OUT: exproperators.p (160, 15): inferred type:  BaseType(INT)
OUT: exproperators.p (160, 18): inferred type:  BaseType(BOOL)
OUT: exproperators.p (161, 5): inferred type:  NIL
OUT: exproperators.p (161, 9): inferred type:  BaseType(INT)
OUT: exproperators.p (162, 5): inferred type:  NIL
OUT: exproperators.p (162, 14): inferred type:  BaseType(INT)
OUT: exproperators.p (162, 18): inferred type:  BaseType(BOOL)
OUT: exproperators.p (165, 5): inferred type:  NIL
OUT: exproperators.p (165, 7): inferred type:  BaseType(BOOL)
OUT: exproperators.p (166, 5): inferred type:  NIL
OUT: exproperators.p (166, 7): inferred type:  BaseType(BOOL)
OUT: exproperators.p (167, 5): inferred type:  NIL
OUT: exproperators.p (167, 18): inferred type:  BaseType(BOOL)
OUT: exproperators.p (167, 21): inferred type:  BaseType(BOOL)
OUT: exproperators.p (167, 24): inferred type:  BaseType(BOOL)
OUT: exproperators.p (168, 5): inferred type:  NIL
OUT: exproperators.p (168, 13): inferred type:  BaseType(INT)
OUT: exproperators.p (168, 24): inferred type:  BaseType(BOOL)
OUT: exproperators.p (169, 5): inferred type:  ERROR
OUT: exproperators.p (169, 5): inferred type:  NIL
OUT: exproperators.p (169, 18): inferred type:  ERROR
OUT: exproperators.p (170, 5): inferred type:  ERROR
OUT: exproperators.p (170, 5): inferred type:  NIL
OUT: exproperators.p (170, 12): inferred type:  SeqType(BaseType(BOOL))
OUT: exproperators.p (170, 22): inferred type:  BaseType(BOOL)
OUT: exproperators.p (170, 26): inferred type:  ERROR
OUT: exproperators.p (172, 5): inferred type:  ERROR
OUT: exproperators.p (172, 5): inferred type:  MapType(BaseType(INT), BaseType(BOOL))
OUT: exproperators.p (172, 5): inferred type:  NIL
OUT: exproperators.p (172, 12): inferred type:  TupType(BaseType(BOOL), TupType(BaseType(INT), NIL))
OUT: exproperators.p (173, 5): inferred type:  ERROR
OUT: exproperators.p (173, 5): inferred type:  NIL
OUT: exproperators.p (173, 12): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (179, 5): inferred type:  NIL
OUT: exproperators.p (179, 5): inferred type:  SeqType(BaseType(INT))
OUT: exproperators.p (180, 5): inferred type:  MapType(BaseType(INT), SeqType(BaseType(INT)))
OUT: exproperators.p (180, 5): inferred type:  NIL
OUT: exproperators.p (180, 9): inferred type:  SeqType(BaseType(INT))
OUT: exproperators.p (181, 5): inferred type:  NIL
OUT: exproperators.p (181, 5): inferred type:  NmdTupType(NmdTupTypeField("a", SeqType(BaseType(INT))), NmdTupType(NmdTupTypeField("b", MapType(BaseType(INT), SeqType(BaseType(INT)))), NIL))
OUT: exproperators.p (181, 10): inferred type:  NmdTupType(NmdTupTypeField("a", SeqType(BaseType(INT))), NmdTupType(NmdTupTypeField("b", MapType(BaseType(INT), SeqType(BaseType(INT)))), NIL))
OUT: exproperators.p (181, 17): inferred type:  NmdTupType(NmdTupTypeField("b", MapType(BaseType(INT), SeqType(BaseType(INT)))), NIL)
OUT: exproperators.p (183, 5): inferred type:  NIL
OUT: exproperators.p (183, 7): inferred type:  SeqType(BaseType(INT))
OUT: exproperators.p (183, 13): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (183, 15): inferred type:  TupType(BaseType(INT), NIL)
OUT: exproperators.p (184, 5): inferred type:  NIL
OUT: exproperators.p (184, 17): inferred type:  BaseType(INT)
OUT: exproperators.p (184, 21): inferred type:  BaseType(BOOL)
OUT: exproperators.p (186, 5): inferred type:  NIL
OUT: exproperators.p (186, 13): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (187, 5): inferred type:  NIL
OUT: exproperators.p (187, 17): inferred type:  BaseType(INT)
OUT: exproperators.p (187, 21): inferred type:  BaseType(BOOL)
OUT: exproperators.p (189, 5): inferred type:  NIL
OUT: exproperators.p (189, 13): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (189, 15): inferred type:  TupType(BaseType(INT), NIL)
OUT: exproperators.p (190, 5): inferred type:  NIL
OUT: exproperators.p (190, 21): inferred type:  BaseType(BOOL)
OUT: exproperators.p (191, 5): inferred type:  NIL
OUT: exproperators.p (195, 5): inferred type:  NIL
OUT: exproperators.p (195, 13): inferred type:  BaseType(INT)
OUT: exproperators.p (195, 17): inferred type:  BaseType(BOOL)
OUT: exproperators.p (196, 5): inferred type:  NIL
OUT: exproperators.p (196, 19): inferred type:  BaseType(INT)
OUT: exproperators.p (196, 23): inferred type:  BaseType(BOOL)
OUT: exproperators.p (197, 5): inferred type:  NIL
OUT: exproperators.p (197, 14): inferred type:  MapType(BaseType(INT), SeqType(BaseType(INT)))
OUT: exproperators.p (197, 15): inferred type:  SeqType(BaseType(INT))
OUT: exproperators.p (197, 18): inferred type:  BaseType(INT)
OUT: exproperators.p (197, 22): inferred type:  BaseType(BOOL)
OUT: exproperators.p (198, 5): inferred type:  NIL
OUT: exproperators.p (199, 5): inferred type:  NIL
OUT: exproperators.p (199, 17): inferred type:  BaseType(BOOL)
OUT: exproperators.p (199, 22): inferred type:  BaseType(BOOL)
OUT: exproperators.p (199, 26): inferred type:  BaseType(INT)
OUT: exproperators.p (199, 30): inferred type:  BaseType(BOOL)
OUT: exproperators.p (201, 5): inferred type:  NIL
OUT: exproperators.p (202, 5): inferred type:  NIL
OUT: exproperators.p (204, 5): inferred type:  NIL
OUT: exproperators.p (205, 5): inferred type:  NIL
OUT: exproperators.p (205, 23): inferred type:  BaseType(BOOL)
OUT: exproperators.p (207, 5): inferred type:  NIL
OUT: exproperators.p (211, 5): inferred type:  NIL
OUT: exproperators.p (211, 5): inferred type:  SeqType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)))
OUT: exproperators.p (211, 12): inferred type:  TupType(BaseType(INT), TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL))
OUT: exproperators.p (211, 15): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (211, 15): inferred type:  TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL)
OUT: exproperators.p (211, 17): inferred type:  TupType(BaseType(INT), NIL)
OUT: exproperators.p (212, 5): inferred type:  NIL
OUT: exproperators.p (212, 12): inferred type:  TupType(BaseType(INT), TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL))
OUT: exproperators.p (212, 15): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (212, 15): inferred type:  TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL)
OUT: exproperators.p (213, 5): inferred type:  NIL
OUT: exproperators.p (213, 12): inferred type:  TupType(BaseType(INT), TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL))
OUT: exproperators.p (213, 16): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (213, 16): inferred type:  TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL)
OUT: exproperators.p (215, 5): inferred type:  NIL
OUT: exproperators.p (215, 5): inferred type:  SeqType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)))
OUT: exproperators.p (215, 12): inferred type:  TupType(BaseType(INT), TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL))
OUT: exproperators.p (215, 15): inferred type:  TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL)
OUT: exproperators.p (216, 5): inferred type:  NIL
OUT: exproperators.p (216, 12): inferred type:  TupType(BaseType(INT), TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL))
OUT: exproperators.p (216, 15): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (216, 15): inferred type:  TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL)
OUT: exproperators.p (217, 5): inferred type:  NIL
OUT: exproperators.p (217, 12): inferred type:  TupType(BaseType(INT), TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL))
OUT: exproperators.p (217, 15): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (217, 15): inferred type:  TupType(TupType(BaseType(INT), TupType(BaseType(INT), NIL)), NIL)
OUT: exproperators.p (217, 17): inferred type:  TupType(BaseType(INT), NIL)
OUT: exproperators.p (219, 5): inferred type:  ERROR
OUT: exproperators.p (219, 5): inferred type:  MapType(BaseType(BOOL), SeqType(NmdTupType(NmdTupTypeField("a", BaseType(INT)), NmdTupType(NmdTupTypeField("b", BaseType(INT)), NIL))))
OUT: exproperators.p (219, 5): inferred type:  NIL
OUT: exproperators.p (219, 7): inferred type:  SeqType(NmdTupType(NmdTupTypeField("a", BaseType(INT)), NmdTupType(NmdTupTypeField("b", BaseType(INT)), NIL)))
OUT: exproperators.p (220, 5): inferred type:  ERROR
OUT: exproperators.p (220, 5): inferred type:  NIL
OUT: exproperators.p (220, 7): inferred type:  SeqType(NmdTupType(NmdTupTypeField("a", BaseType(INT)), NmdTupType(NmdTupTypeField("b", BaseType(INT)), NIL)))
OUT: exproperators.p (222, 5): inferred type:  NIL
OUT: exproperators.p (222, 14): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (222, 18): inferred type:  BaseType(INT)
OUT: exproperators.p (222, 20): inferred type:  BaseType(INT)
OUT: exproperators.p (222, 24): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (222, 28): inferred type:  BaseType(INT)
OUT: exproperators.p (222, 30): inferred type:  BaseType(INT)
OUT: exproperators.p (222, 34): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (222, 38): inferred type:  BaseType(INT)
OUT: exproperators.p (222, 40): inferred type:  BaseType(BOOL)
OUT: exproperators.p (223, 5): inferred type:  NIL
OUT: exproperators.p (223, 14): inferred type:  TupType(BaseType(INT), TupType(BaseType(INT), NIL))
OUT: exproperators.p (223, 18): inferred type:  BaseType(INT)
OUT: exproperators.p (223, 20): inferred type:  BaseType(INT)
OUT: exproperators.p (223, 30): inferred type:  BaseType(INT)
OUT: exproperators.p (223, 40): inferred type:  BaseType(BOOL)
OUT: exproperators.p (225, 5): inferred type:  NIL
OUT: exproperators.p (225, 11): inferred type:  BaseType(EVENT)
OUT: exproperators.p (231, 8): inferred type:  NIL
OUT: exproperators.p (231, 15): inferred type:  BaseType(INT)
OUT: exproperators.p (236, 9): inferred type:  NIL
OUT: exproperators.p (236, 16): inferred type:  NmdTupType(NmdTupTypeField("a", SeqType(BaseType(INT))), NmdTupType(NmdTupTypeField("b", MapType(BaseType(INT), SeqType(BaseType(INT)))), NIL))
OUT: exproperators.p (241, 8): inferred type:  NIL
OUT: exproperators.p (241, 14): inferred type:  BaseType(INT)
OUT: exproperators.p (241, 16): inferred type:  BaseType(INT)
OUT: exproperators.p (242, 8): inferred type:  NIL
OUT: exproperators.p (242, 15): inferred type:  BaseType(INT)
OUT: exproperators.p (250, 7): inferred type:  NIL
OUT: exproperators.p (250, 7): inferred type:  SeqType(BaseType(INT))
OUT: exproperators.p (250, 12): inferred type:  SeqType(BaseType(INT))
OUT: exproperators.p (251, 4): inferred type:  NIL
OUT: exproperators.p (251, 13): inferred type:  BaseType(INT)
OUT: exproperators.p (251, 14): inferred type:  BaseType(INT)
OUT: exproperators.p (251, 17): inferred type:  BaseType(BOOL)
OUT: exproperators.p (251, 20): inferred type:  BaseType(INT)
OUT: exproperators.p (62, 5): "assert" expects a boolean value
OUT: exproperators.p (62, 20): Operator expected first argument to be an integer value
OUT: exproperators.p (62, 30): Values cannot be compared because their types are incompatible
OUT: exproperators.p (63, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (63, 15): Operator expected a boolean value
OUT: exproperators.p (64, 5): "assert" expects a boolean value
OUT: exproperators.p (64, 20): Operator expected first argument to be an integer value
OUT: exproperators.p (65, 5): "assert" expects a boolean value
OUT: exproperators.p (65, 14): Operator expected second argument to be an integer value
OUT: exproperators.p (66, 5): "assert" expects a boolean value
OUT: exproperators.p (66, 20): Operator expected second argument to be a boolean value
OUT: exproperators.p (66, 25): Values cannot be compared because their types are incompatible
OUT: exproperators.p (67, 5): "assert" expects a boolean value
OUT: exproperators.p (67, 14): Operator expected first argument to be a boolean value
OUT: exproperators.p (69, 5): "assert" expects a boolean value
OUT: exproperators.p (69, 15): Values cannot be compared because their types are incompatible
OUT: exproperators.p (80, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (80, 17): Operator expected second argument to be an integer value
OUT: exproperators.p (81, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (81, 20): Operator expected first argument to be an integer value
OUT: exproperators.p (82, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (82, 17): Operator expected second argument to be an integer value
OUT: exproperators.p (83, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (83, 17): Operator expected second argument to be an integer value
OUT: exproperators.p (85, 5): "assert" expects a boolean value
OUT: exproperators.p (85, 18): Operator expected second argument to be an integer value
OUT: exproperators.p (86, 5): "assert" expects a boolean value
OUT: exproperators.p (86, 18): Operator expected second argument to be an integer value
OUT: exproperators.p (87, 5): "assert" expects a boolean value
OUT: exproperators.p (87, 18): Operator expected second argument to be an integer value
OUT: exproperators.p (88, 5): "assert" expects a boolean value
OUT: exproperators.p (88, 18): Operator expected second argument to be an integer value
OUT: exproperators.p (90, 5): "assert" expects a boolean value
OUT: exproperators.p (90, 17): Operator expected first argument to be a boolean value
OUT: exproperators.p (91, 5): "assert" expects a boolean value
OUT: exproperators.p (91, 17): Operator expected first argument to be a boolean value
OUT: exproperators.p (92, 5): "assert" expects a boolean value
OUT: exproperators.p (92, 20): Operator expected second argument to be a boolean value
OUT: exproperators.p (94, 5): "assert" expects a boolean value
OUT: exproperators.p (94, 17): Operator expected second argument to be an integer value
OUT: exproperators.p (95, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (95, 12): Operator expected an integer value
OUT: exproperators.p (96, 5): "assert" expects a boolean value
OUT: exproperators.p (96, 17): Values cannot be compared because their types are incompatible
OUT: exproperators.p (98, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (98, 15): Operator expected a boolean value
OUT: exproperators.p (99, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (99, 15): Operator expected a boolean value
OUT: exproperators.p (101, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (101, 12): Operator expected an integer value
OUT: exproperators.p (106, 5): "assert" expects a boolean value
OUT: exproperators.p (106, 17): Values cannot be compared because their types are incompatible
OUT: exproperators.p (106, 20): Operator expected an integer value
OUT: exproperators.p (107, 5): "assert" expects a boolean value
OUT: exproperators.p (107, 14): Operator expected first argument to be an integer value
OUT: exproperators.p (107, 21): Values cannot be compared because their types are incompatible
OUT: exproperators.p (108, 5): "assert" expects a boolean value
OUT: exproperators.p (108, 14): Operator expected first argument to be an integer value
OUT: exproperators.p (108, 18): Values cannot be compared because their types are incompatible
OUT: exproperators.p (110, 5): "assert" expects a boolean value
OUT: exproperators.p (110, 14): Operator expected first argument to be an integer value
OUT: exproperators.p (111, 5): "assert" expects a boolean value
OUT: exproperators.p (111, 14): Operator expected first argument to be an integer value
OUT: exproperators.p (125, 5): "assert" expects a boolean value
OUT: exproperators.p (125, 14): Operator expected first argument to be a boolean value
OUT: exproperators.p (132, 5): value must be a subtype of sequence type
OUT: exproperators.p (138, 5): key must be an integer
OUT: exproperators.p (146, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (146, 9): Operator expected a map value
OUT: exproperators.p (146, 20): Indexer must be applied to a sequence or map
OUT: exproperators.p (147, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (147, 9): Operator expected a map value
OUT: exproperators.p (147, 22): Indexer must be applied to a sequence or map
OUT: exproperators.p (148, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (148, 9): Operator expected a map or sequence value
OUT: exproperators.p (169, 5): "assert" expects a boolean value
OUT: exproperators.p (169, 18): Value can never be in the map
OUT: exproperators.p (170, 5): "assert" expects a boolean value
OUT: exproperators.p (170, 26): Values cannot be compared because their types are incompatible
OUT: exproperators.p (172, 5): key not in the domain of the map
OUT: exproperators.p (173, 5): value not in the codomain of the map
OUT: exproperators.p (219, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: exproperators.p (220, 5): invalid assignment. right hand side is not a subtype of left hand side
OUT: Compilation failed
EXIT: -1
